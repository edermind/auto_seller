from aiogram import types, F, Router
from aiogram.types import Message,ReplyKeyboardRemove
from aiogram.filters import Command,StateFilter
from aiogram.fsm.context import FSMContext

from drom_parser import parse_drom



import slots_keyboard
import menu_keyboard
import places_keyboard
import text
import states

router = Router()


@router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer(text.greet.format(name=msg.from_user.full_name), reply_markup=menu_keyboard.menu)

@router.callback_query(F.data == "menu")
async def menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup= menu_keyboard.menu)

'''
# –í—Å–µ —á—Ç–æ –Ω–∏–∂–µ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é(1)
'''
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏"–ú–æ–∏ —Å–ª–æ—Ç—ã" –≤ –≥–ª.–º–µ–Ω—é 
@router.callback_query(F.data == "my_slots")
async def my_slots_handler(callback_query: types.CallbackQuery, state:FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–ú–æ–∏ —Å–ª–æ—Ç—ã", reply_markup=slots_keyboard.sl)
    await state.set_state(states.slots_class.slots_menu)
    # current_state = await state.get_state()
    # await callback_query.message.answer(f"–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {current_state}")


#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏"–ü–ª–æ—â–∞–¥–∫–∏" –≤ –≥–ª.–º–µ–Ω—é 
@router.callback_query(F.data == "places")
async def places_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–ü–ª–æ—â–∞–¥–∫–∏: ", reply_markup=places_keyboard.places_kb)

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏"–ò–Ω—Ñ–æ—Ä–º–∞—Ü—è" –≤ –≥–ª.–º–µ–Ω—é 
@router.callback_query(F.data == "info")
async def info_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(text.info)

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏"–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞" –≤ –≥–ª.–º–µ–Ω—é 
@router.callback_query(F.data == "supports")
async def supports_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(text.support)

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" –≤ –≥–ª.–º–µ–Ω—é 
@router.callback_query(F.data == "notifications")
async def noti_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(text.slots_test)
    
#–≤–æ—Ç –¥–æ —Å—é–¥–∞(1)
@router.callback_query(F.data == "new_slot")
async def new_slot_handler(callback_query: types.CallbackQuery, state:FSMContext):
    await callback_query.answer()
    await callback_query.message.answer('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É: ')
    await state.set_state(states.slots_class.waiting_for_link)
    
    

@router.message()
async def parse_link_and_send_result(message: types.Message):
    link = message.text
    result = await parse_drom(link)
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: \"{result}\"")





@router.message(F.text == "–ú–µ–Ω—é")
async def menu(msg: Message):
    await msg.answer(text.menu, reply_markup=menu_keyboard.menu)